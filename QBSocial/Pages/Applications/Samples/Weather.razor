@page "/sample/weatherforecast"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@* @inject HttpClient Http *@
@inject IHttpClientFactory ClientFactory


<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        @accessTokenStr
    </div>
}

@code {
    private WeatherForecast[]? forecasts;
    private string accessTokenStr = "";

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    protected override async Task OnInitializedAsync()
    {
        @* var tokenResult = await TokenProvider.RequestAccessToken(
        new AccessTokenRequestOptions
        {
            Scopes = new[] { "https://metahexb2c.onmicrosoft.com/api/API.Access" }
        });
 *@

        try
        {
            @* if (tokenResult.TryGetToken(out var token)){
                accessTokenStr = token.Value.ToString();
            }else{
                accessTokenStr = "is empty";
            } *@
            var client = ClientFactory.CreateClient("WebAPI");
            forecasts = await client.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast"); 
            
            @* forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");  *@
            @*forecasts = await WApi.List();*@
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
