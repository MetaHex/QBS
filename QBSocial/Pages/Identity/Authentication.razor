@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager Navigation

@if (Action == "logged-out")
{

    <div class="mt-4 display-4 text-center">
        Logged Out. Go <a class="" href="/">Home</a>
    </div>
}
else
{
    <img src="images/bg.png" />
    <RemoteAuthenticatorView Action="@Action" />
    @*<RemoteAuthenticatorViewCore Action="@Action"
                                 AuthenticationState="AuthenticationState" OnLoginSucceded="RestoreState"
                                 OnLogoutSucceded="RestoreState" />*@
}


@code{
    [Parameter] public string? Action { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //if (Action == "login-callback")
        //{
        //    var idtoken = GetParameter(new Uri(Navigation.Uri).Query, "id_token");


        //}
        //if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogIn,
        //Action))
        //{
        //    AuthenticationState.Id = Guid.NewGuid().ToString();
        //    await JS.InvokeVoidAsync("sessionStorage.setKey",
        //        AuthenticationState.Id, State.Store());
        //}
    }

    public static string? GetParameter(string queryString, string key)
    {
        if (string.IsNullOrEmpty(queryString) || queryString == "?")
        {
            return null;
        }

        var scanIndex = 0;
        if (queryString[0] == '?')
        {
            scanIndex = 1;
        }

        var textLength = queryString.Length;
        var equalIndex = queryString.IndexOf('=');
        if (equalIndex == -1)
        {
            equalIndex = textLength;
        }

        while (scanIndex < textLength)
        {
            var ampersandIndex = queryString.IndexOf('&', scanIndex);
            if (ampersandIndex == -1)
            {
                ampersandIndex = textLength;
            }

            if (equalIndex < ampersandIndex)
            {
                while (scanIndex != equalIndex && char.IsWhiteSpace(queryString[scanIndex]))
                {
                    ++scanIndex;
                }
                var name = queryString[scanIndex..equalIndex];
                var value = queryString.Substring(equalIndex + 1, ampersandIndex - equalIndex - 1);
                var processedName = Uri.UnescapeDataString(name.Replace('+', ' '));
                if (string.Equals(processedName, key, StringComparison.OrdinalIgnoreCase))
                {
                    return Uri.UnescapeDataString(value.Replace('+', ' '));
                }

                equalIndex = queryString.IndexOf('=', ampersandIndex);
                if (equalIndex == -1)
                {
                    equalIndex = textLength;
                }
            }
            else
            {
                if (ampersandIndex > scanIndex)
                {
                    var value = queryString[scanIndex..ampersandIndex];
                    if (string.Equals(value, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return string.Empty;
                    }
                }
            }

            scanIndex = ampersandIndex + 1;
        }

        return null;
    }

}

@*
@code{
    [Parameter] public string? Action { get; set; }
} *@
